import org.apache.tools.ant.filters.ReplaceTokens

project.ext.distance = versionDetails().commitDistance

String getVersion(boolean withDist) {
    def details = versionDetails()

    def dist = ""
    if (withDist) {
        if (project.distance > 0)
            dist = "-${project.distance}"
    }

    def version = "${details.lastTag}${dist}"
    return version.toString()
}

String getVersion() {
    return getVersion(true)
}

version getVersion()
project.ext.absoluteVersion = getVersion(false)

def replaceFilesDir = 'com/fishy/plye'
def replaceFiles = ['Plye']
def fullReplaceFiles = [] as List<String>

def prepareReplaceFiles = { ->
    if (!fullReplaceFiles.empty) return

    replaceFiles.forEach { value ->
        fullReplaceFiles.add("$replaceFilesDir/${value}.java")
    }
}

task updateVersion(type: Copy) {
    group = 'Versioning'
    description = 'Copies files from source to build/generated-src, replacing instances of @version@ with the current version.'

    doFirst {
        println "Preparing ${project.name} ${project.absoluteVersion} for the build process"
    }

    prepareReplaceFiles()
    inputs.files(fullReplaceFiles)
    outputs.dir("$buildDir/generated-src")

    from sourceSets.main.allJava.srcDirs
    into "$buildDir/generated-src"

    fullReplaceFiles.forEach { String value ->
        include value
    }

    filter(ReplaceTokens, tokens: [VERSION: project.version])
}

task copyBuild(type: Copy) {
    group = 'Build'
    description = 'Copies the latest build and renames it to have current instead of the version and build number'
    dependsOn 'build'

    def input = "$buildDir/libs/${project.name}-${project.version}.jar"
    def out = "$buildDir/libs"

    inputs.file(input)
    outputs.file("$out/${project.name}-current.jar")

    from file(input)
    into file(out)

    rename '(.+)-(v[^-]+)(-(.+))?\\.(.+)', '$1-current.$5'
}

project.ext.baseOutDir = 'builds'
project.ext.outDir = "${project.baseOutDir}/${project.absoluteVersion}"

task finalizeBuild {
    group = 'Build'
    description = 'Moves the files from the most recent build into the correct folder'
    dependsOn 'copyBuild'

    def libsDir = "$buildDir/libs"
    def input = ["${project.name}-${project.version}.jar"]
    def currentInput = "${project.name}-current.jar"
    def shouldDelete = false

    if (shouldDelete) input.forEach { value -> destroyables.register("$libsDir/$value") }
    else {
        inputs.files(input)
        input.forEach { value -> outputs.file("${project.outDir}/$value") }
        outputs.file("${project.baseOutDir}/$currentInput")
    }

    doLast {
        if (!file(project.outDir).exists())
            mkdir project.outDir

        copy {
            from libsDir
            include input
            into project.outDir
        }

        copy {
            from libsDir
            include currentInput
            into project.baseOutDir
        }

        if (shouldDelete) {
            delete {
                input.forEach { value ->
                    delete "$libsDir/$value"
                }
            }
        }
    }
}

task cleanBuilds {
    group = 'Build'
    description = 'Removes the builds directory'
//    mustRunAfter clean

    destroyables.register(file(project.baseOutDir))

    doLast {
        delete project.baseOutDir as String
    }
}

sourceSets {
    main {
        java {
            prepareReplaceFiles()
            fullReplaceFiles.forEach { String value ->
                exclude value
            }
        }
    }
}

compileJava.source "$buildDir/generated-src"
compileJava.dependsOn updateVersion
build.finalizedBy finalizeBuild
clean.dependsOn cleanBuilds
